package com.ishopee.logisticsinventorymanagement.views;

import com.ishopee.logisticsinventorymanagement.models.PurchaseDetails;
import com.ishopee.logisticsinventorymanagement.models.PurchaseOrder;
import com.lowagie.text.Font;
import com.lowagie.text.Rectangle;
import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfWriter;
import org.springframework.web.servlet.view.document.AbstractPdfView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.awt.*;
import java.util.Date;
import java.util.DoubleSummaryStatistics;
import java.util.List;
import java.util.Map;

public class VendorInvoicePdfView extends AbstractPdfView {

    Font titleFont = new Font(Font.HELVETICA, 20, Font.UNDERLINE, Color.BLUE);
    Font tableFont = new Font(Font.TIMES_ROMAN, 10, Font.BOLD, Color.red);
    Font headingFont = new Font(Font.TIMES_ROMAN, 12, Font.BOLD, Color.white);
    Font tableValFont = new Font(Font.HELVETICA, 10, Font.NORMAL, Color.darkGray);

    @Override
    protected void buildPdfMetadata(Map<String, Object> model, Document document, HttpServletRequest request) {
        HeaderFooter header = new HeaderFooter(new Phrase("INVOICE GENERATED BY iShopee"), false);
        header.setAlignment(Element.ALIGN_RIGHT);
        document.setHeader(header);

        HeaderFooter footer = new HeaderFooter(new Phrase("Invoice Generated : " + new Date()), false);
        footer.setAlignment(Element.ALIGN_BASELINE);
        document.setFooter(footer);
    }

    @Override
    protected void buildPdfDocument(Map<String, Object> model, Document document, PdfWriter writer, HttpServletRequest request, HttpServletResponse response) {
        response.setHeader("Content-Disposition", "attachment;filename=VendorInvoice.pdf");
        setTitle("VENDOR INVOICE", document);

        List<PurchaseDetails> pdtls = (List<PurchaseDetails>) model.get("pdtls");
        PurchaseOrder po = (PurchaseOrder) model.get("po");
        setHeader(po, pdtls, document);

        String[] headings = {"PART CODE", "BASE COST", "QTY", "LINE VALUE"};
        Table pdtlTable = new Table(4);
        pdtlTable.setPadding(2f);
        setPdtlHeadings(pdtlTable, headings, document);

        setPdtlData(pdtlTable, pdtls, document);
    }

    private void setTitle(String title, Document document) {
        Paragraph p = new Paragraph(title, titleFont);
        p.setAlignment(Element.ALIGN_CENTER);
        document.add(p);
    }

    private void setHeader(PurchaseOrder po, List<PurchaseDetails> pdtls, Document document) {
        Table table = new Table(4);
        table.setPadding(5f);
        table.setBorder(Rectangle.NO_BORDER);

        table.addCell(getHeadingCell("VENDOR CODE", tableFont));
        table.addCell(getValueCell(po.getVendor().getUserCode(), tableValFont));
        table.addCell(getHeadingCell("ORDER CODE", tableFont));
        table.addCell(getValueCell(po.getOrderCode(), tableValFont));
        table.addCell(getHeadingCell("FINAL COST", tableFont));
        table.addCell(getValueCell(calculateFinalCost(pdtls), tableValFont));
        table.addCell(getHeadingCell("SHIPMENT CODE", tableFont));
        table.addCell(getValueCell(po.getSt().getShipCode(), tableValFont));
        document.add(table);
    }

    private void setPdtlHeadings(Table pdtlTable, String[] headings, Document document) {
        for (String heading : headings) {
            pdtlTable.addCell(getHeadingCell(heading, headingFont));
        }
    }

    private void setPdtlData(Table pdtlTable, List<PurchaseDetails> pdtls, Document document) {
        for (PurchaseDetails pdtl : pdtls) {
            pdtlTable.addCell(new Phrase(pdtl.getPart().getPartCode(), tableValFont));
            pdtlTable.addCell(new Phrase(pdtl.getPart().getPartCost().toString(), tableValFont));
            pdtlTable.addCell(new Phrase(pdtl.getQty().toString(), tableValFont));
            pdtlTable.addCell(new Phrase(String.valueOf(pdtl.getQty() * pdtl.getPart().getPartCost()), tableValFont));
        }
        document.add(pdtlTable);
    }

    private Cell getHeadingCell(String heading, Font font) {
        Cell cell = null;
        try {
            cell = new Cell(new Phrase(heading, font));
            cell.setBackgroundColor(Color.black);
            cell.setBorderColor(Color.WHITE);
            cell.setBorder(Rectangle.BOTTOM);
        } catch (BadElementException e) {
            e.printStackTrace();
        }
        return cell;
    }

    private Cell getValueCell(String val, Font font) {
        Cell cell = null;
        try {
            cell = new Cell(new Phrase(val, font));
            cell.setBackgroundColor(Color.WHITE);
            cell.setBorder(Rectangle.NO_BORDER);
        } catch (BadElementException e) {
            e.printStackTrace();
        }
        return cell;
    }

    private String calculateFinalCost(List<PurchaseDetails> pdtls) {
        double finalCost;
        DoubleSummaryStatistics dss = new DoubleSummaryStatistics();
        for (PurchaseDetails pdtl : pdtls) {
//            finalCost += pdtl.getQty() * pdtl.getPart().getPartCost();
            dss.accept(pdtl.getQty() * pdtl.getPart().getPartCost());
        }
        finalCost = dss.getSum();
        return String.valueOf(finalCost);
    }
}
